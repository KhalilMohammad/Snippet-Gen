{"version":3,"sources":["Algolia.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["getSearchResult","query","a","ky","get","searchParams","json","parsed","App","useState","data","state","setState","handleOnClick","className","htmlFor","type","id","placeholder","onChange","e","target","value","onClick","disabled","processingTimeMS","hits","map","hit","key","objectID","dangerouslySetInnerHTML","__html","_highlightResult","url","href","rel","title","d","Date","created_at","month","toLocaleString","date","getDate","year","getFullYear","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2QAGMA,EAAe,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACDC,IAClBC,IAAI,uCAAwC,CAC3CC,aAAc,CACZJ,WAGHK,OAPmB,cAChBC,EADgB,yBASfA,GATe,2CAAH,sD,MC2GNC,MApGf,WAAgB,IAAD,EACaC,mBAAmB,CAC3CR,MAAO,GACPS,KAAM,OAHK,mBACNC,EADM,KACCC,EADD,KAMPC,EAAa,uCAAG,4BAAAX,EAAA,sEACDF,EAAgBW,EAAMV,OADrB,OACdS,EADc,OAEpBE,EAAS,eACJD,EADG,CAEND,UAJkB,2CAAH,qDAenB,OACE,yBAAKI,UAAU,8BACb,yBAAKA,UAAU,UACb,yBAAKA,UAAU,QACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,2BACb,oDAEF,8BACE,yBAAKA,UAAU,mBACb,2BAAOC,QAAQ,UACf,2BACED,UAAU,eACVE,KAAK,OACLC,GAAG,QACHC,YAAY,cACZC,SAvBK,SAACC,GACpBR,EAAS,eACJD,EADG,CAENV,MAAOmB,EAAEC,OAAOC,aAuBR,yBAAKR,UAAU,+BACb,4BACEA,UAAU,4BACVE,KAAK,SACLO,QAASV,EACTW,UAAWb,EAAMV,OAJnB,UAQCU,EAAMD,MAAQC,EAAMD,KAAKe,kBACxB,2BAAOX,UAAU,kCACdH,EAAMD,KAAKe,iBADd,4BAMN,yBAAKX,UAAU,0BACZH,EAAMD,MACLC,EAAMD,KAAKgB,KAAKC,KAAI,SAACC,GAAD,mBAClB,yBAAKd,UAAU,cAAce,IAAKD,EAAIE,UACpC,yBACEhB,UAAU,0CACViB,wBAAyB,CACvBC,OAAM,OAAEJ,QAAF,IAAEA,GAAF,UAAEA,EAAKK,wBAAP,iBAAE,EAAuBC,WAAzB,aAAE,EAA4BZ,SAGxC,wBAAIR,UAAU,QACZ,uBACEqB,KAAMP,EAAIM,IACVb,OAAO,SACPe,IAAI,uBAEHR,EAAIS,QAGT,uBACEvB,UAAU,kBACViB,wBAAyB,CACvBC,OACG,WACC,IAAMM,EAAI,IAAIC,KAAKX,EAAIY,YACjBC,EAAQH,EAAEI,eAAe,UAAW,CACxCD,MAAO,UAEHE,EAAOL,EAAEM,UACTC,EAAOP,EAAEQ,cACf,MAAM,GAAN,OAAUL,EAAV,YAAmBE,EAAnB,aAA4BE,EAA5B,OAPD,IAAD,UAQOjB,EAAIK,wBARX,iBAQO,EAAsBI,aAR7B,aAQO,EAA6Bf,oBCrF1CyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e70763f7.chunk.js","sourcesContent":["import ky from \"ky\";\r\nimport { SearchResult } from \"./Algolia.d\";\r\n\r\nconst getSearchResult = async (query: string) => {\r\n  const parsed = await ky\r\n    .get(\"http://hn.algolia.com/api/v1/search?\", {\r\n      searchParams: {\r\n        query,\r\n      },\r\n    })\r\n    .json<SearchResult>();\r\n\r\n  return parsed;\r\n};\r\n\r\nexport { getSearchResult };\r\n","import React, { useState } from \"react\";\nimport { getSearchResult } from \"./Algolia\";\nimport { SearchResult } from \"./Algolia.d\";\nimport \"./App.css\";\n\ninterface AppState {\n  query: string;\n  data: SearchResult | null;\n}\n\nfunction App() {\n  const [state, setState] = useState<AppState>({\n    query: \"\",\n    data: null,\n  });\n\n  const handleOnClick = async () => {\n    const data = await getSearchResult(state.query);\n    setState({\n      ...state,\n      data,\n    });\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setState({\n      ...state,\n      query: e.target.value,\n    });\n  };\n\n  return (\n    <div className=\"row justify-content-center\">\n      <div className=\"col-10\">\n        <div className=\"card\">\n          <div className=\"card-body p-4\">\n            <div className=\"text-center w-75 m-auto\">\n              <h4>Snippet Genertation</h4>\n            </div>\n            <form>\n              <div className=\"form-group mb-3\">\n                <label htmlFor=\"query\"></label>\n                <input\n                  className=\"form-control\"\n                  type=\"text\"\n                  id=\"query\"\n                  placeholder=\"Enter query\"\n                  onChange={handleChange}\n                />\n              </div>\n              <div className=\"form-group mb-0 text-center\">\n                <button\n                  className=\"btn btn-primary btn-block\"\n                  type=\"button\"\n                  onClick={handleOnClick}\n                  disabled={!state.query}\n                >\n                  Submit\n                </button>\n                {state.data && state.data.processingTimeMS && (\n                  <small className=\"form-text text-muted text-left\">\n                    {state.data.processingTimeMS} ms to process request\n                  </small>\n                )}\n              </div>\n            </form>\n            <div className=\"mt-4 search-result-box\">\n              {state.data &&\n                state.data.hits.map((hit) => (\n                  <div className=\"search-item\" key={hit.objectID}>\n                    <div\n                      className=\"font-13 text-success mb-2 text-truncate\"\n                      dangerouslySetInnerHTML={{\n                        __html: hit?._highlightResult?.url?.value,\n                      }}\n                    ></div>\n                    <h4 className=\"mb-1\">\n                      <a\n                        href={hit.url}\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                      >\n                        {hit.title}\n                      </a>\n                    </h4>\n                    <p\n                      className=\"mb-0 text-muted\"\n                      dangerouslySetInnerHTML={{\n                        __html:\n                          (() => {\n                            const d = new Date(hit.created_at);\n                            const month = d.toLocaleString(\"default\", {\n                              month: \"short\",\n                            });\n                            const date = d.getDate();\n                            const year = d.getFullYear();\n                            return `${month} ${date}, ${year} - `;\n                          })() + hit._highlightResult?.title?.value,\n                      }}\n                    ></p>\n                  </div>\n                ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}